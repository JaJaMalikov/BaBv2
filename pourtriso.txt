{
      "role": "user",
      "parts": [
        {
          "text": "Presque, le deuxième panneau n'est toujours pas retractable, il y a bien l'icone chevron pour mais aucun effet"
        }
      ]
    },
    {
      "role": "model",
      "parts": [
        {
          "thoughtSignature": "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",
          "text": "Vous avez l'œil ! Vous avez tout à fait raison, j'ai construit le deuxième panneau d'outils, j'ai ajouté le bouton pour le replier, mais j'ai oublié de connecter le signal du bouton à la fonction qui masque les autres icônes. C'est une simple ligne de code manquante de ma part.\n\nJe corrige cette omission immédiatement dans `main_window.py`."
        }
      ]
    },
    {
      "role": "model",
      "parts": [
        {
          "functionCall": {
            "name": "read_file",
            "args": {
              "absolute_path": "/home/jaja/Documents/BaBv2-dev/ui/main_window.py"
            }
          }
        }
      ]
    },
    {
      "role": "user",
      "parts": [
        {
          "functionResponse": {
            "id": "read_file-1754832383188-54e9bb5d41329",
            "name": "read_file",
            "response": {
              "output": "from pathlib import Path\nfrom PySide6.QtWidgets import (\n    QMainWindow,\n    QGraphicsScene,\n    QVBoxLayout,\n    QWidget,\n    QGraphicsPixmapItem,\n    QDockWidget,\n    QFileDialog,\n    QInputDialog,\n    QGraphicsRectItem,\n    QGraphicsTextItem,\n    QToolButton,\n    QFrame,\n    QStyle,\n    QHBoxLayout,\n)\nfrom PySide6.QtGui import QPainter, QPixmap, QAction, QColor, QPen\nfrom PySide6.QtCore import Qt, QTimer, QPointF, QSize\n\nfrom core.scene_model import SceneModel, SceneObject\nfrom core.puppet_piece import PuppetPiece\nfrom ui.timeline_widget import TimelineWidget\nfrom ui.inspector_widget import InspectorWidget\nfrom ui.library_widget import LibraryWidget\nfrom ui.zoomable_view import ZoomableView\nfrom ui.playback_handler import PlaybackHandler\nfrom ui.object_manager import ObjectManager\nfrom ui.draggable_widget import DraggableOverlay\nimport ui.scene_io as scene_io\nfrom ui.icons import (\n    icon_scene_size, icon_background, icon_library, icon_inspector, icon_timeline,\n    icon_chevron_left, icon_chevron_right\n)\n\n\nclass MainWindow(QMainWindow):\n    def __init__(self):\n        super().__init__()\n        self.setWindowTitle(\"Borne and the Bayrou - Disco MIX\")\n\n        self.scene_model = SceneModel()\n        self.background_item = None\n        self.zoom_factor = 1.0\n        self._suspend_item_updates = False\n\n        self.scene = QGraphicsScene()\n        self.scene.setSceneRect(0, 0, self.scene_model.scene_width, self.scene_model.scene_height)\n        \n        self.object_manager = ObjectManager(self)\n\n        self.view = ZoomableView(self.scene, self)\n        self.view.setRenderHint(QPainter.Antialiasing)\n        self.view.setRenderHint(QPainter.SmoothPixmapTransform)\n        self.view.setBackgroundBrush(QColor(\"#121212\"))\n        self.view.setFrameShape(QFrame.NoFrame)\n        self.view.setHorizontalScrollBarPolicy(Qt.ScrollBarAsNeeded)\n        self.view.setVerticalScrollBarPolicy(Qt.ScrollBarAsNeeded)\n\n        main_widget = QWidget()\n        layout = QVBoxLayout(main_widget)\n        layout.setContentsMargins(0, 0, 0, 0)\n        layout.setSpacing(0)\n        layout.addWidget(self.view)\n        self.setCentralWidget(main_widget)\n\n        self.timeline_dock = QDockWidget(\"Timeline\", self)\n        self.timeline_dock.setObjectName(\"dock_timeline\")\n        self.timeline_widget = TimelineWidget()\n        self.timeline_dock.setWidget(self.timeline_widget)\n        self.timeline_dock.setFeatures(QDockWidget.DockWidgetMovable | QDockWidget.DockWidgetClosable)\n        self.addDockWidget(Qt.BottomDockWidgetArea, self.timeline_dock)\n\n        self.inspector_dock = QDockWidget(\"Inspector\", self)\n        self.inspector_dock.setObjectName(\"dock_inspector\")\n        self.inspector_widget = InspectorWidget(self)\n        self.inspector_dock.setWidget(self.inspector_widget)\n        self.inspector_dock.setFeatures(QDockWidget.DockWidgetMovable | QDockWidget.DockWidgetClosable)\n        self.addDockWidget(Qt.RightDockWidgetArea, self.inspector_dock)\n        self.inspector_dock.hide()\n\n        self.library_dock = QDockWidget(\"Bibliothèques\", self)\n        self.library_dock.setObjectName(\"dock_library\")\n        self.library_widget = LibraryWidget(root_dir=str(Path.cwd()))\n        self.library_dock.setWidget(self.library_widget)\n        self.library_dock.setFeatures(QDockWidget.DockWidgetMovable | QDockWidget.DockWidgetClosable)\n        self.addDockWidget(Qt.LeftDockWidgetArea, self.library_dock)\n\n        self.playback_handler = PlaybackHandler(self.scene_model, self.timeline_widget, self.inspector_widget, self)\n\n        self._create_actions()\n        self._build_main_tools_overlay()\n        self.connect_signals()\n        self._setup_scene_visuals()\n        self._apply_unified_stylesheet()\n\n        # --- Startup Sequence ---\n        self.showMaximized()\n        self.inspector_dock.show()\n        self.library_dock.show()\n        self.timeline_dock.show()\n        self.timeline_dock.visibilityChanged.connect(lambda _: self.ensure_fit())\n        self.timeline_dock.topLevelChanged.connect(lambda _: self.ensure_fit())\n        self.ensure_fit()\n        scene_io.create_blank_scene(self)\n        self.ensure_fit()\n        self.scene.selectionChanged.connect(self._on_scene_selection_changed)\n\n    def showEvent(self, event):\n        super().showEvent(event)\n        QTimer.singleShot(0, self.fit_to_view)\n        QTimer.singleShot(50, self.fit_to_view)\n\n    def _create_actions(self):\n        style = self.style()\n        self.save_action = QAction(style.standardIcon(QStyle.SP_DialogSaveButton), \"Sauvegarder (Ctrl+S)\", self)\n        self.save_action.setShortcut(\"Ctrl+S\")\n        self.load_action = QAction(style.standardIcon(QStyle.SP_DialogOpenButton), \"Charger (Ctrl+O)\", self)\n        self.load_action.setShortcut(\"Ctrl+O\")\n        self.scene_size_action = QAction(icon_scene_size(), \"Taille Scène\", self)\n        self.background_action = QAction(icon_background(), \"Image de fond\", self)\n\n        self.library_dock.toggleViewAction().setIcon(icon_library())\n        self.inspector_dock.toggleViewAction().setIcon(icon_inspector())\n        self.timeline_dock.toggleViewAction().setIcon(icon_timeline())\n\n    def connect_signals(self):\n        # Scene I/O\n        self.save_action.triggered.connect(lambda: scene_io.save_scene(self))\n        self.load_action.triggered.connect(lambda: scene_io.load_scene(self))\n        \n        # Scene settings\n        self.scene_size_action.triggered.connect(self.set_scene_size)\n        self.background_action.triggered.connect(self.set_background)\n\n        # ZoomableView signals\n        self.view.zoom_requested.connect(self.zoom)\n        self.view.fit_requested.connect(self.fit_to_view)\n        self.view.handles_toggled.connect(self.toggle_rotation_handles)\n        self.view.item_dropped.connect(self.object_manager.handle_library_drop)\n\n        # PlaybackHandler signals\n        self.playback_handler.frame_update_requested.connect(self.update_scene_from_model)\n        self.playback_handler.keyframe_add_requested.connect(self.add_keyframe)\n\n        # Library signals\n        self.library_widget.addRequested.connect(self.object_manager._add_library_item_to_scene)\n\n    def _build_main_tools_overlay(self):\n        self._main_tools_overlay = DraggableOverlay(self.view)\n        \n        self.main_tools_layout = QHBoxLayout(self._main_tools_overlay)\n        self.main_tools_layout.setContentsMargins(4, 4, 4, 4)\n        self.main_tools_layout.setSpacing(2)\n\n        icon_size = 32\n        button_size = 36\n\n        button_style = f\"\"\"\n            QToolButton {{\n                background-color: transparent;\n                border: none;\n                padding: 2px;\n                color: #E0E0E0;\n            }}\n            QToolButton:checked {{\n                background-color: rgba(255, 255, 255, 25);\n                border-radius: 4px;\n            }}\n            QToolButton:hover {{\n                background-color: rgba(255, 255, 255, 40);\n                border-radius: 4px;\n            }}\n        \"\"\"\n\n        def make_btn(action: QAction, checkable=False):\n            btn = QToolButton(self._main_tools_overlay)\n            btn.setDefaultAction(action)\n            btn.setIconSize(QSize(icon_size, icon_size))\n            btn.setCheckable(checkable)\n            btn.setStyleSheet(button_style)\n            btn.setFixedSize(button_size, button_size)\n            btn.setToolButtonStyle(Qt.ToolButtonIconOnly)\n            btn.setAutoRaise(True)\n            return btn\n\n        collapse_btn = make_btn(QAction(icon_chevron_left(), \"Replier/Déplier\", self), checkable=True)\n        collapse_btn.setChecked(True)\n        \n        # Build buttons from actions\n        save_btn = make_btn(self.save_action)\n        load_btn = make_btn(self.load_action)\n        scene_size_btn = make_btn(self.scene_size_action)\n        background_btn = make_btn(self.background_action)\n        \n        library_toggle_btn = make_btn(self.library_dock.toggleViewAction(), checkable=True)\n        inspector_toggle_btn = make_btn(self.inspector_dock.toggleViewAction(), checkable=True)\n        timeline_toggle_btn = make_btn(self.timeline_dock.toggleViewAction(), checkable=True)\n\n        # Set initial checked state for dock toggles\n        library_toggle_btn.setChecked(self.library_dock.isVisible())\n        inspector_toggle_btn.setChecked(self.inspector_dock.isVisible())\n        timeline_toggle_btn.setChecked(self.timeline_dock.isVisible())\n\n        # Connect dock visibility changes to button checked state\n        self.library_dock.visibilityChanged.connect(library_toggle_btn.setChecked)\n        self.inspector_dock.visibilityChanged.connect(inspector_toggle_btn.setChecked)\n        self.timeline_dock.visibilityChanged.connect(timeline_toggle_btn.setChecked)\n\n        self.main_tool_buttons = [save_btn, load_btn, scene_size_btn, background_btn, \n                    library_toggle_btn, inspector_toggle_btn, timeline_toggle_btn]\n\n        def toggle_main_tools_collapse(checked):\n            icon = icon_chevron_left() if checked else icon_chevron_right()\n            collapse_btn.setIcon(icon)\n            for w in self.main_tool_buttons:\n                w.setVisible(checked)\n            self._main_tools_overlay.adjustSize()\n\n        collapse_btn.toggled.connect(toggle_main_tools_collapse)\n\n        self.main_tools_layout.addWidget(collapse_btn)\n        for w in self.main_tool_buttons:\n            self.main_tools_layout.addWidget(w)\n\n        self._main_tools_overlay.move(10, 60)\n\n    def _apply_unified_stylesheet(self):\n        self.setStyleSheet(\n            \"\"\"QDockWidget { titlebar-close-icon: none; titlebar-normal-icon: none; background: #1E1E1E; color: #E0E0E0; }\n               QDockWidget::title { background: #1B1B1B; padding: 4px 8px; border: 1px solid #2A2A2A; color: #E0E0E0; }\n               QStatusBar { background: #121212; color: #CFCFCF; }\"\"\")\n\n    def _setup_scene_visuals(self):\n        self.scene_border_item = QGraphicsRectItem(); self.scene_size_text_item = QGraphicsTextItem()\n        self.scene.addItem(self.scene_border_item); self.scene.addItem(self.scene_size_text_item)\n        self._update_scene_visuals()\n\n    def _update_scene_visuals(self):\n        rect = self.scene.sceneRect()\n        self.scene_border_item.setPen(QPen(QColor(100, 100, 100), 2, Qt.DashLine)); self.scene_border_item.setRect(rect)\n        text = f\"{self.scene_model.scene_width}x{self.scene_model.scene_height}\"\n        self.scene_size_text_item.setPlainText(text); self.scene_size_text_item.setDefaultTextColor(QColor(150, 150, 150))\n        text_rect = self.scene_size_text_item.boundingRect()\n        self.scene_size_text_item.setPos(rect.right() - text_rect.width() - 10, rect.bottom() - text_rect.height() - 10)\n\n    def _update_zoom_status(self):\n        txt = f\"Zoom: {self.zoom_factor:.0%}\"\n        self.statusBar().showMessage(txt)\n        if hasattr(self.view, 'set_zoom_label'): self.view.set_zoom_label(f\"{int(self.zoom_factor*100)}%\")\n\n    def zoom(self, factor):\n        self.view.scale(factor, factor)\n        self.zoom_factor *= factor\n        self._update_zoom_status()\n\n    def fit_to_view(self):\n        self.view.resetTransform()\n        self.view.fitInView(self.scene.sceneRect(), Qt.KeepAspectRatio)\n        self.zoom_factor = self.view.transform().m11()\n        self._update_zoom_status()\n\n    def ensure_fit(self):\n        QTimer.singleShot(0, self.fit_to_view)\n\n    def set_scene_size(self):\n        width, ok1 = QInputDialog.getInt(self, \"Taille de la scène\", \"Largeur:\", self.scene_model.scene_width, 1)\n        if ok1:\n            height, ok2 = QInputDialog.getInt(self, \"Taille de la scène\", \"Hauteur:\", self.scene_model.scene_height, 1)\n            if ok2:\n                self.scene_model.scene_width = width\n                self.scene_model.scene_height = height\n                self.scene.setSceneRect(0, 0, width, height)\n                self._update_scene_visuals()\n                self._update_background()\n                self._update_zoom_status()\n\n    def set_background(self):\n        filePath, _ = QFileDialog.getOpenFileName(self, \"Charger une image d'arrière-plan\", \"\", \"Images (*.png *.jpg *.jpeg)\")\n        if filePath:\n            self.scene_model.background_path = filePath\n            self._update_background()\n\n    def _update_background(self):\n        if self.background_item:\n            self.scene.removeItem(self.background_item)\n            self.background_item = None\n        if self.scene_model.background_path and Path(self.scene_model.background_path).exists():\n            pixmap = QPixmap(self.scene_model.background_path)\n            scaled_pixmap = pixmap.scaled(self.scene.sceneRect().size().toSize(), Qt.KeepAspectRatio, Qt.SmoothTransformation)\n            self.background_item = QGraphicsPixmapItem(scaled_pixmap)\n            scene_rect = self.scene.sceneRect()\n            self.background_item.setPos(scene_rect.center() - self.background_item.boundingRect().center())\n            self.background_item.setZValue(-10000)\n            self.scene.addItem(self.background_item)\n\n    def toggle_rotation_handles(self, visible):\n        for item in self.object_manager.graphics_items.values():\n            if isinstance(item, PuppetPiece):\n                item.set_handle_visibility(visible)\n        self.view.handles_btn.setChecked(visible)\n\n    def update_scene_from_model(self):\n        index = self.scene_model.current_frame\n        keyframes = self.scene_model.keyframes\n        if not keyframes: return\n\n        graphics_items = self.object_manager.graphics_items\n\n        sorted_indices = sorted(keyframes.keys())\n        prev_kf_index = next((i for i in reversed(sorted_indices) if i <= index), -1)\n        next_kf_index = next((i for i in sorted_indices if i > index), -1)\n\n        if prev_kf_index != -1 and next_kf_index != -1 and prev_kf_index != next_kf_index:\n            prev_kf, next_kf = keyframes[prev_kf_index], keyframes[next_kf_index]\n            ratio = (index - prev_kf_index) / (next_kf_index - prev_kf_index)\n            for name, puppet in self.scene_model.puppets.items():\n                prev_pose, next_pose = prev_kf.puppets.get(name, {}), next_kf.puppets.get(name, {})\n                for member_name in puppet.members:\n                    if not (prev_state := prev_pose.get(member_name)) or not (next_state := next_pose.get(member_name)): continue\n                    interp_rot = prev_state['rotation'] + (next_state['rotation'] - prev_state['rotation']) * ratio\n                    piece = graphics_items[f\"{name}:{member_name}\"]\n                    piece.local_rotation = interp_rot\n                    if not piece.parent_piece:\n                        prev_pos, next_pos = prev_state['pos'], next_state['pos']\n                        interp_x = prev_pos[0] + (next_pos[0] - prev_pos[0]) * ratio\n                        interp_y = prev_pos[1] + (next_pos[1] - prev_pos[1]) * ratio\n                        piece.setPos(interp_x, interp_y)\n        else:\n            target_kf_index = prev_kf_index if prev_kf_index != -1 else next_kf_index\n            if target_kf_index == -1: return\n            kf = keyframes[target_kf_index]\n            for name, state in kf.puppets.items():\n                for member, member_state in state.items():\n                    piece = graphics_items[f\"{name}:{member}\"]\n                    piece.local_rotation = member_state['rotation']\n                    if not piece.parent_piece: piece.setPos(*member_state['pos'])\n\n        for puppet in self.scene_model.puppets.values():\n            for root_member in puppet.get_root_members():\n                root_piece = graphics_items[f\"{next(iter(self.scene_model.puppets.keys()))}:{root_member.name}\"]\n                root_piece.setRotation(root_piece.local_rotation)\n                for child in root_piece.children: child.update_transform_from_parent()\n\n        def state_for(name: str):\n            si = sorted(keyframes.keys())\n            prev = next((i for i in reversed(si) if i <= index and name in keyframes[i].objects), None)\n            if prev is None: return None\n            return keyframes[prev].objects.get(name)\n\n        self._suspend_item_updates = True\n        try:\n            for name, base_obj in self.scene_model.objects.items():\n                st = state_for(name)\n                gi = graphics_items.get(name)\n                if st is None:\n                    if gi:\n                        gi.setSelected(False)\n                        gi.setVisible(False)\n                    continue\n                if gi is None:\n                    tmp = SceneObject(name, st.get('obj_type', base_obj.obj_type), st.get('file_path', base_obj.file_path),\n                                      x=st.get('x', base_obj.x), y=st.get('y', base_obj.y), rotation=st.get('rotation', base_obj.rotation),\n                                      scale=st.get('scale', base_obj.scale), z=st.get('z', getattr(base_obj, 'z', 0)))\n                    self.object_manager._add_object_graphics(tmp)\n                    gi = graphics_items.get(name)\n                if gi:\n                    gi.setVisible(True)\n                    gi.setPos(st.get('x', gi.x()), st.get('y', gi.y()))\n                    gi.setRotation(st.get('rotation', gi.rotation()))\n                    gi.setScale(st.get('scale', gi.scale()))\n                    gi.setZValue(st.get('z', int(gi.zValue())))\n                    attached = st.get('attached_to', None)\n                    if attached:\n                        try:\n                            puppet_name, member_name = attached\n                            parent_piece = graphics_items.get(f\"{puppet_name}:{member_name}\")\n                            if parent_piece and gi.parentItem() is not parent_piece:\n                                scene_pt = gi.mapToScene(gi.transformOriginPoint())\n                                gi.setParentItem(parent_piece)\n                                local_pt = parent_piece.mapFromScene(scene_pt)\n                                gi.setPos(local_pt - gi.transformOriginPoint())\n                        except Exception:\n                            pass\n                    else:\n                        if gi.parentItem() is not None:\n                            scene_pt = gi.mapToScene(gi.transformOriginPoint())\n                            gi.setParentItem(None)\n                            gi.setPos(scene_pt - gi.transformOriginPoint())\n        finally:\n            self._suspend_item_updates = False\n\n    def add_keyframe(self, frame_index):\n        kf = self.scene_model.add_keyframe(frame_index)\n        for name, puppet in self.scene_model.puppets.items():\n            puppet_state = {}\n            for member_name in puppet.members:\n                piece = self.object_manager.graphics_items[f\"{name}:{member_name}\"]\n                puppet_state[member_name] = {'rotation': piece.local_rotation, 'pos': (piece.x(), piece.y())}\n            kf.puppets[name] = puppet_state\n        self.timeline_widget.add_keyframe_marker(frame_index)\n\n    def select_object_in_inspector(self, name: str):\n        if not hasattr(self, 'inspector_widget') or not self.inspector_widget:\n            return\n        lw = self.inspector_widget.list_widget\n        for i in range(lw.count()):\n            it = lw.item(i)\n            typ, nm = it.data(Qt.UserRole)\n            if typ == 'object' and nm == name:\n                lw.setCurrentItem(it)\n                break\n\n    def _on_scene_selection_changed(self):\n        for item in self.scene.selectedItems():\n            for name, gi in self.object_manager.graphics_items.items():\n                if gi is item and name in self.scene_model.objects:\n                    self.select_object_in_inspector(name)\n                    return\n"
            }
          }
        }
      ]
    },
